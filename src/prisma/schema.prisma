generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  verificationCode String?  @default("")
  hashedPassword  String?
  image           String?   @default("")
  about           String?   @default("Hey there! I am using HieroGlyph")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastSeen        DateTime? @default(now())

  accounts Account[]
  sessions Session[]
  messages Message[]
  conversations Conversation[] @relation("UserConversations", references: [id])
  seenMessages Message[] @relation("Seen", references: [id])
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  refresh_token_expires_in Int?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt   DateTime @default(now())
  name            String?
  isGroup         Boolean?
  logo            String?

  messages Message[]
  users    User[] @relation("UserConversations", references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  audio String?
  type String?
  createdAt DateTime @default(now())

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  seen User[] @relation("Seen", references: [id])
}
